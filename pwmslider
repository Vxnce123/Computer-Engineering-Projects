<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Robot Control</title>
    <style>
        /* Same styling as before... */
    </style>
</head>
<body>
    <h1>Robot Control </h1>

    <div class="controls">
        <!-- Control Buttons for Forward, Left, Stop, Right, Back -->
        <!-- Buttons remain unchanged... -->
    </div>

    <!-- Slider Section for controlling PWM -->
    <div class="slider-container">
        <input type="range" min="0" max="65535" value="32768" class="slider" id="speedSlider">
        <div class="slider-value" id="sliderValue">Speed: 50%</div>
    </div>

    <!-- Toggle Button to turn the LED on/off -->
    <!-- Toggle button remains unchanged... -->

    <!-- Music Button -->
    <!-- Music button remains unchanged... -->

    <script>
        // Get the slider element and the value display
        const slider = document.getElementById("speedSlider");
        const sliderValue = document.getElementById("sliderValue");

        // Update the displayed value when the slider changes
        slider.oninput = function() {
            // Map slider value to a percentage
            const speed = Math.round((slider.value / 65535) * 100);
            
            // Update the display with the speed percentage value
            sliderValue.textContent = `Speed: ${speed}%`;

            // Send the slider value to the server via GET request
            fetch(`/slider?value=${slider.value}`)
                .then(response => response.text())
                .then(data => console.log("Slider value sent:", slider.value))
                .catch(error => console.error("Error sending slider value:", error));
        };
    </script>
</body>
</html>


import time
from machine import Pin, PWM
import network
import socket

# Define GPIO pin for LED
led_pin = Pin(15, Pin.OUT)

# Set up PWM for LED brightness control on pin 15
pwm = PWM(led_pin)
pwm.freq(1000)  # Set PWM frequency (1000Hz)
pwm.duty_u16(0)  # Initially, set PWM duty to 0 (LED off)

# Wi-Fi credentials
ssid = "SmartRG-00ea"
pw = "68469c9e8f"

# Connect to Wi-Fi
wlan = network.WLAN(network.STA_IF)
wlan.active(True)
wlan.connect(ssid, pw)

while not wlan.isconnected():
    print("Connecting...")
    time.sleep(1)
print("Connected!")

wlanInfo = wlan.ifconfig()
print("My Pico's IP address is...", wlanInfo[0])

# Create a global variable to store the LED state (off or on)
led_state = False  # LED starts off

# Function to read HTML content from a file
def get_html(html_name):
    try:
        with open(html_name, "r") as file:
            html = file.read()
        return html
    except OSError as e:
        print(f"Error reading file {html_name}: {e}")
        return "<html><body><h1>Error: Unable to load HTML file</h1></body></html>"

# Set up the web server to listen on port 80
addr = socket.getaddrinfo("0.0.0.0", 80)[0][-1]
s = socket.socket()
s.bind(addr)
s.listen(1)

print("Listening on", addr)

while True:
    try:
        # Accept a client connection
        client, addr = s.accept()
        print('Client connected from', addr)

        # Read the request from the client
        request = client.recv(1024)
        request = str(request)

        print("Request received:", request)  # Debugging line to show the received request
        
        # Parse the request to get the path
        try:
            request_path = request.split()[1]
        except IndexError:
            request_path = ""
        
        print("Request Path:", request_path)  # Debugging line to show the extracted path

        # Handle different control commands based on the request path
        if request_path == '/forward?':
            pwm.duty_u16(65535)  # Set LED to full brightness (100%)
        elif request_path == '/stop?':
            pwm.duty_u16(0)  # Turn off the LED (0% brightness)
            
        elif request_path == '/music/play?':
            pwm.duty_u16(30000)  # Set the LED brightness to a specific level (for music control)
            
        # Handle toggle LED on/off
        elif request_path == '/led/toggle?':
            # Toggle the LED state
            if led_state:
                pwm.duty_u16(0)  # Turn off the LED
                led_state = False
            else:
                pwm.duty_u16(65535)  # Turn on the LED
                led_state = True

        elif request_path.startswith('/slider?value='):
            # Extract the slider value from the URL (it will be a string)
            slider_value = int(request_path.split('=')[1])
            # Set the PWM duty cycle based on the slider value
            pwm.duty_u16(slider_value)
            print(f"Slider Value Received: {slider_value}")

        # Get the HTML content for the response
        response = get_html("index.html")
        
        # Send the HTML response to the client (browser)
        client.send('HTTP/1.0 200 OK\r\nContent-type: text/html\r\n\r\n')
        client.send(response)
        client.close()  # Close the connection to the client

    except OSError as e:
        print("Socket error:", e)
        client.close()  # Ensure that the client socket is closed in case of an error
    except Exception as e:
        print("Unexpected error:", e)
        client.close()  # Ensure that the client socket is closed in case of an unexpected error
