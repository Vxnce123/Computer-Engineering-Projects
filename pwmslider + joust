<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Robot Control</title>
    <style>
        /* Same styling as before... */
    </style>
</head>
<body>
    <h1>Robot Control </h1>

    <div class="controls">
        <!-- Control Buttons for Forward, Left, Stop, Right, Back -->
        <!-- Buttons remain unchanged... -->
    </div>

    <!-- Slider Section for controlling PWM -->
    <div class="slider-container">
        <input type="range" min="0" max="65535" value="32768" class="slider" id="speedSlider">
        <div class="slider-value" id="sliderValue">Speed: 50%</div>
    </div>

    <!-- Toggle Button to turn the LED on/off -->
    <!-- Toggle button remains unchanged... -->

    <!-- Music Button -->
    <!-- Music button remains unchanged... -->

    <script>
        // Get the slider element and the value display
        const slider = document.getElementById("speedSlider");
        const sliderValue = document.getElementById("sliderValue");

        // Update the displayed value when the slider changes
        slider.oninput = function() {
            // Map slider value to a percentage
            const speed = Math.round((slider.value / 65535) * 100);
            
            // Update the display with the speed percentage value
            sliderValue.textContent = `Speed: ${speed}%`;

            // Send the slider value to the server via GET request
            fetch(`/slider?value=${slider.value}`)
                .then(response => response.text())
                .then(data => console.log("Slider value sent:", slider.value))
                .catch(error => console.error("Error sending slider value:", error));
        };
    </script>
</body>
</html>


import time
from machine import Pin, PWM
import network
import socket

# Define GPIO pin for LED
led_pin = Pin(15, Pin.OUT)

# Set up PWM for LED brightness control on pin 15
pwm = PWM(led_pin)
pwm.freq(1000)  # Set PWM frequency (1000Hz)
pwm.duty_u16(0)  # Initially, set PWM duty to 0 (LED off)

# Wi-Fi credentials
ssid = "SmartRG-00ea"
pw = "68469c9e8f"

# Connect to Wi-Fi
wlan = network.WLAN(network.STA_IF)
wlan.active(True)
wlan.connect(ssid, pw)

while not wlan.isconnected():
    print("Connecting...")
    time.sleep(1)
print("Connected!")

wlanInfo = wlan.ifconfig()
print("My Pico's IP address is...", wlanInfo[0])

# Create a global variable to store the LED state (off or on)
led_state = False  # LED starts off

# Function to read HTML content from a file
def get_html(html_name):
    try:
        with open(html_name, "r") as file:
            html = file.read()
        return html
    except OSError as e:
        print(f"Error reading file {html_name}: {e}")
        return "<html><body><h1>Error: Unable to load HTML file</h1></body></html>"

# Set up the web server to listen on port 80
addr = socket.getaddrinfo("0.0.0.0", 80)[0][-1]
s = socket.socket()
s.bind(addr)
s.listen(1)

print("Listening on", addr)

while True:
    try:
        # Accept a client connection
        client, addr = s.accept()
        print('Client connected from', addr)

        # Read the request from the client
        request = client.recv(1024)
        request = str(request)

        print("Request received:", request)  # Debugging line to show the received request
        
        # Parse the request to get the path
        try:
            request_path = request.split()[1]
        except IndexError:
            request_path = ""
        
        print("Request Path:", request_path)  # Debugging line to show the extracted path

        # Handle different control commands based on the request path
        if request_path == '/forward?':
            pwm.duty_u16(65535)  # Set LED to full brightness (100%)
        elif request_path == '/stop?':
            pwm.duty_u16(0)  # Turn off the LED (0% brightness)
            
        elif request_path == '/music/play?':
            pwm.duty_u16(30000)  # Set the LED brightness to a specific level (for music control)
            
        # Handle toggle LED on/off
        elif request_path == '/led/toggle?':
            # Toggle the LED state
            if led_state:
                pwm.duty_u16(0)  # Turn off the LED
                led_state = False
            else:
                pwm.duty_u16(65535)  # Turn on the LED
                led_state = True

        elif request_path.startswith('/slider?value='):
            # Extract the slider value from the URL (it will be a string)
            slider_value = int(request_path.split('=')[1])
            # Set the PWM duty cycle based on the slider value
            pwm.duty_u16(slider_value)
            print(f"Slider Value Received: {slider_value}")

        # Get the HTML content for the response
        response = get_html("index.html")
        
        # Send the HTML response to the client (browser)
        client.send('HTTP/1.0 200 OK\r\nContent-type: text/html\r\n\r\n')
        client.send(response)
        client.close()  # Close the connection to the client

    except OSError as e:
        print("Socket error:", e)
        client.close()  # Ensure that the client socket is closed in case of an error
    except Exception as e:
        print("Unexpected error:", e)
        client.close()  # Ensure that the client socket is closed in case of an unexpected error

////////////

from time import sleep
from machine import Pin, PWM
import network
import socket

# Motor Control Pins
In1 = Pin(19, Pin.OUT)
In2 = Pin(17, Pin.OUT)
EN_A = Pin(18, Pin.OUT)

In3 = Pin(14, Pin.OUT)
In4 = Pin(12, Pin.OUT)
EN_B = Pin(13, Pin.OUT)

led = Pin(0, Pin.OUT)  # LED Pin

# Create PWM objects for motor speed control
EN_A.high()
EN_B.high()

def move_forward():
    In1.low()
    In2.high()
    In3.high()
    In4.low()
    print("forward")

def move_backward():
    In1.high()
    In2.low()
    In3.low()
    In4.high()
    print("backwards")

def move_stop():    
    In1.low()
    In2.low()
    In3.low()
    In4.low()
    print("stop")

def move_left():
    In1.low()
    In2.high()
    In3.low()
    In4.high()
    print("left")

def move_right():
    In1.high()
    In2.low()
    In3.high()
    In4.low()
    print("right")


class Servo:
    __servo_pwm_freq = 50
    __min_u16_duty = 1640 - 2 # offset for correction
    __max_u16_duty = 7864 - 0  # offset for correction
    min_angle = 0
    max_angle = 180
    current_angle = 0.001

    def __init__(self, pin):
        self.__initialise(pin)

    def update_settings(self, servo_pwm_freq, min_u16_duty, max_u16_duty, min_angle, max_angle, pin):
        self.__servo_pwm_freq = servo_pwm_freq
        self.__min_u16_duty = min_u16_duty
        self.__max_u16_duty = max_u16_duty
        self.min_angle = min_angle
        self.max_angle = max_angle
        self.__initialise(pin)

    def move(self, angle):
        angle = round(angle, 2)
        if angle == self.current_angle:
            return
        self.current_angle = angle
        duty_u16 = self.__angle_to_u16_duty(angle)
        self.__motor.duty_u16(duty_u16)

    def __angle_to_u16_duty(self, angle):
        return int((angle - self.min_angle) * self.__angle_conversion_factor) + self.__min_u16_duty

    def __initialise(self, pin):
        self.current_angle = -0.001
        self.__angle_conversion_factor = (self.__max_u16_duty - self.__min_u16_duty) / (self.max_angle - self.min_angle)
        self.__motor = PWM(Pin(pin))
        self.__motor.freq(self.__servo_pwm_freq)

# Create Servo instance
lance = Servo(pin=16)
lance_position = 0

notes = {
    'C4': 261,
    'C4#': 277,
    'D4': 293,
    'D4#': 311,
    'E4': 329,
    'F4': 349,
    'F4#': 370,
    'G4': 392,
    'G4#': 415,
    'A4': 440,
    'A4#': 466,
    'B4': 466,
    'C5': 523,
    'D5': 587,
    'E5': 659,
    'F5': 698,
    'G5': 784,
    'A5': 880,
}

# Define note durations (in seconds)
quarter = 0.75
half = 1
whole = 2
eighth = 0.25
dotted_eighth = 0.12
dotted_quarter = 0.5

# Super Mario Theme Melody based on your input notes
def super_mario_theme():
    melody = [
        # First line of notes
        ('E5', dotted_eighth), ('E5', eighth), ('E5', eighth),
        ('C4', dotted_eighth), ('E5', eighth), ('G5', dotted_quarter), ('G4',quarter)
    ]
        
    piezo_pin = Pin(15, Pin.OUT)  
    piezo_pwm = PWM(piezo_pin)

    # Play the melody
    for note, duration in melody:
        if note in notes:
            piezo_pwm.freq(notes[note])
            piezo_pwm.duty_u16(32768)  # Play sound at 50% volume
            sleep(duration)
            piezo_pwm.duty_u16(0)  # Silence
            sleep(0.1)  # Short pause between notes

# Wi-Fi credentials
ssid = "SmartRG-00ea"
pw = "68469c9e8f"
wlan = network.WLAN(network.STA_IF)
wlan.active(True)
wlan.connect(ssid, pw)

while not wlan.isconnected():
    print("Connecting...")
    sleep(1)
print("Connected!")

wlanInfo = wlan.ifconfig()
print("My Pico's IP address is...", wlanInfo[0])

# Start the web server to handle requests
def handle_request(request):
    """Handle HTTP requests."""
    global lance_position  # Make sure the lance_position is accessible here

    if 'forward' in request:
        move_forward()
    elif 'backward' in request:
        move_backward()
    elif 'left' in request:
        move_left()
    elif 'right' in request:
        move_right()
    elif 'stop' in request:
        move_stop()
    elif 'music' in request:
        super_mario_theme()
    elif 'servo' in request:
        # Toggle the lance position between 0 and 180 degrees
        if lance_position == 0:
            lance_position = 180
        else:
            lance_position = 0
        lance.move(lance_position)  # Move the servo to the new position
    else:
        return "Unknown command"
    return "Command executed"

def get_html():
    return """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Robot Control</title>
    <style>
        body {
            margin: 0;
            height: 85vh;
            display: flex;
            justify-content: flex-start;
            align-items: flex-end;
            padding: 0;
            position: relative;
            background-color: #AB91C4;
            font-family: Arial, sans-serif;
        }

        h1 {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 48px;
            color: #8000FF;
            margin: 0;
            text-align: center;
        }

        .controls {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: absolute;
            bottom: 10px;
            left: 10px;
            padding: 0;
        }

        .row {
            display: flex;
            flex-direction: row;
            align-items: center;
        }

        button {
            all: unset;
            cursor: pointer;
            background: transparent;
            border: none;
            position: relative;
            transition: all 0.3s ease; /* Add smooth transition */
        }

        .button {
            width: 0;
            height: 0;
            margin: 5px;
        }

        .forward {
            border-bottom: 60px solid #8000FF;
            border-left: 30px solid transparent;
            border-right: 30px solid transparent;
        }

        .back {
            border-top: 60px solid #8000FF;
            border-left: 30px solid transparent;
            border-right: 30px solid transparent;
        }

        .left {
            border-top: 30px solid transparent;
            border-bottom: 30px solid transparent;
            border-right: 60px solid #2196F3;
        }

        .right {
            border-top: 30px solid transparent;
            border-bottom: 30px solid transparent;
            border-left: 60px solid #2196F3;
        }

        .stop {
            width: 70px;
            height: 70px;
            background-color: #F44336;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            font-size: 18px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        /* New CSS for button interaction */
        .toggle-button, .music-button {
            width: 100px;
            height: 100px;
            background-color: #2196F3;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            font-size: 50px;
            color: white;
            cursor: pointer;
            position: absolute;
            transition: all 0.3s ease; /* Smooth transition */
        }

        .music-button {
            bottom: 90px;
            right: 0px;
        }

        .toggle-button {
            bottom: 10px;
            right: 70px;
        }

        /* Active state (pressed) */
        .active {
            background-color: #8000FF; /* Purple color */
            transform: scale(0.95); /* Slightly shrink the button for animation */
        }
    </style>
</head>
<body>
    <h1>Robot Control</h1>
    <div class="controls">
        <button class="button forward" onclick="sendCommand('forward')"></button>
        <div class="row">
            <button class="button left" onclick="sendCommand('left')"></button>
            <button class="stop" onclick="sendCommand('stop')">Stop</button>
            <button class="button right" onclick="sendCommand('right')"></button>
        </div>
        <button class="button back" onclick="sendCommand('backward')"></button>
    </div>
    <button class="music-button" onclick="sendCommand('music')">🎶</button>
    <button class="toggle-button" onclick="toggleButton()">⚔️</button>

    <script>
        // Function to send commands to the server
        function sendCommand(command) {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", "/" + command, true);
            xhr.send();
        }

        // Function to toggle the button's active state
        function toggleButton() {
            var toggleButton = document.querySelector('.toggle-button');
            toggleButton.classList.toggle('active'); // Toggle the 'active' class
            sendCommand('servo'); // Send the servo command to the server (or any other command)
        }
    </script>
</body>
</html>

"""

# Set up the web server
def start_server():
    addr = socket.getaddrinfo(wlanInfo[0], 80)[0][-1]
    s = socket.socket()
    s.bind(addr)
    s.listen(1)
    print('Listening on', addr)

    while True:
        cl, addr = s.accept()
        
        request = cl.recv(1024)
        request = str(request)
       
        response = handle_request(request)
        cl.send('HTTP/1.1 200 OK\r\n')
        cl.send('Content-Type: text/html\r\n')
        cl.send('\r\n')
        cl.send(get_html())
        cl.close()

# Start the server
start_server()




